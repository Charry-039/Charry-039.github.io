<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>迷宫问题</title>
    <link href="/2022/05/28/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/28/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><p>给定一个 n×n 的二维数组，如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">int maze[5][5] = &#123;<br><br>0, 1, 0, 0, 0,<br><br>0, 1, 0, 1, 0,<br><br>0, 0, 0, 0, 0,<br><br>0, 1, 1, 1, 0,<br><br>0, 0, 0, 1, 0,<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。</p><p>数据保证至少存在一条从左上角走到右下角的路径。</p><p>输入格式<br>第一行包含整数 n。</p><p>接下来 n 行，每行包含 n 个整数 0 或 1，表示迷宫。</p><p>输出格式<br>输出从左上角到右下角的最短路线，如果答案不唯一，输出任意一条路径均可。</p><p>按顺序，每行输出一个路径中经过的单元格的坐标，左上角坐标为 (0,0)，右下角坐标为 (n−1,n−1)。</p><p>数据范围<br>0≤n≤1000<br>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">5<br>0 1 0 0 0<br>0 1 0 1 0<br>0 0 0 0 0<br>0 1 1 1 0<br>0 0 0 1 0<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">0 0<br>1 0<br>2 0<br>2 1<br>2 2<br>2 3<br>2 4<br>3 4<br>4 4<br></code></pre></td></tr></table></figure><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;queue&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br>PII memory[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    queue&lt;PII&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;n - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>&#125;);<br>    st[n - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        PII t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-type">int</span> x = t.first + dx[i];<br>            <span class="hljs-type">int</span> y = t.second + dy[i];<br>            <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; n &amp;&amp; !st[x][y] &amp;&amp; !g[x][y]) &#123;<br>                q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>                memory[x][y] = t;<br>                st[x][y] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i][j]);<br>    <span class="hljs-built_in">bfs</span>();<br>    PII t = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (t.first != n - <span class="hljs-number">1</span> || t.second != n - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, memory[t.first][t.second].first, memory[t.first][t.second].second);<br>        t = memory[t.first][t.second];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/1078/">acwing 1076</a></p>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索</tag>
      
      <tag>bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强连通分量</title>
    <link href="/2022/05/28/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <url>/2022/05/28/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>找树的头节点，进行作为整个trajan()的入口</li><li>找邻接点，进行深搜（递归前每个点都打上时间戳，并压入栈），直至第一个叶子节点</li><li>找到第一个强连通分量的入口，即dfn[x]&#x3D;&#x3D;low[x]，low[x]没有被更新过，没有可以依赖的父节点<br> 从栈顶（从栈顶开始是意味着压着x的点都为x点的后节点）开始弹出元素，直至x点被弹出，为一块强连通分量。（被弹出也就意味着他们不再具有被当作强连通父节点的资格了）</li><li>不断回溯，在递归回溯的过程中查找被回溯的点的low[x-1]是否比当前low[x]小，是则更新当前low[x]。</li></ul><h2 id="“如何发现强连通父节点？”"><a href="#“如何发现强连通父节点？”" class="headerlink" title="“如何发现强连通父节点？”"></a>“如何发现强连通父节点？”</h2><p>只要是一个强连通分量，就会存在 尾节点能扫到父节点 的情况，当发现这个父节点的dfn[i]!&#x3D;0，即他被遍历过了（顺序比自己靠前），那么走以下代码去判断是否可作为父节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (stack.contains(i)) <span class="hljs-comment">//是邻接点且还留在栈里，代表是候选连同量父节点</span><br>  low[x] = Math.min(low[x], dfn[i]);<br></code></pre></td></tr></table></figure><h2 id="栈的意义"><a href="#栈的意义" class="headerlink" title="栈的意义"></a>栈的意义</h2><ul><li>检验当前点是否可作为连通分量的父节点，即看它是否在栈内，因为已经被抛出的连通分量节点均已被弹出栈。</li></ul>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>强连通分量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>池塘计数</title>
    <link href="/2022/05/28/%E6%B1%A0%E5%A1%98%E8%AE%A1%E6%95%B0/"/>
    <url>/2022/05/28/%E6%B1%A0%E5%A1%98%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="池塘计数"><a href="#池塘计数" class="headerlink" title="池塘计数"></a>池塘计数</h1><p>农夫约翰有一片 N∗M 的矩形土地。<br>最近，由于降雨的原因，部分土地被水淹没了。<br>现在用一个字符矩阵来表示他的土地。<br>每个单元格内，如果包含雨水，则用”W”表示，如果不含雨水，则用”.”表示。<br>现在，约翰想知道他的土地中形成了多少片池塘。<br>每组相连的积水单元格集合可以看作是一片池塘。<br>每个单元格视为与其上、下、左、右、左上、右上、左下、右下八个邻近单元格相连。</p><p>请你输出共有多少片池塘，即矩阵中共有多少片相连的”W”块。</p><p>输入格式<br>第一行包含两个整数 N 和 M。</p><p>接下来 N 行，每行包含 M 个字符，字符为”W”或”.”，用以表示矩形土地的积水状况，字符之间没有空格。</p><p>输出格式<br>输出一个整数，表示池塘数目。</p><p>数据范围<br><code>1≤N,M≤1000</code></p><p>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">10 12<br>W........WW.<br>.WWW.....WWW<br>....WW...WW.<br>.........WW.<br>.........W..<br>..W......W..<br>.W.W.....WW.<br>W.W.W.....W.<br>.W.W......W.<br>..W.......W.<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3<br></code></pre></td></tr></table></figure><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by Charry on 2022/4/25.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br><span class="hljs-type">int</span> dir[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>,  <span class="hljs-number">0</span>&#125;,<br>                 &#123;<span class="hljs-number">0</span>,  <span class="hljs-number">1</span>&#125;,<br>                 &#123;<span class="hljs-number">1</span>,  <span class="hljs-number">1</span>&#125;,<br>                 &#123;<span class="hljs-number">1</span>,  <span class="hljs-number">0</span>&#125;,<br>                 &#123;<span class="hljs-number">1</span>,  <span class="hljs-number">-1</span>&#125;,<br>                 &#123;<span class="hljs-number">0</span>,  <span class="hljs-number">-1</span>&#125;,<br>                 &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;,<br>                 &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;,<br>                 &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;&#125;;<span class="hljs-comment">//八连通,八个方向</span><br><span class="hljs-type">int</span> n, m, cnt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; queue;<br>    queue.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>    st[x][y] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cur = queue.<span class="hljs-built_in">front</span>();<br>        queue.<span class="hljs-built_in">pop</span>();<br>        x = cur.first;<br>        y = cur.second;<br>        st[x][y] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-type">int</span> xx = x + dir[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> yy = y + dir[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (xx &gt;= <span class="hljs-number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= <span class="hljs-number">1</span> &amp;&amp; yy &lt;= m &amp;&amp; g[xx][yy] == <span class="hljs-string">&#x27;W&#x27;</span> &amp;&amp; !st[xx][yy]) &#123;<br>                queue.<span class="hljs-built_in">push</span>(&#123;xx, yy&#125;);<br>                st[xx][yy] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-type">char</span> t[m];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;t);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            g[i][j] = t[j - <span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-comment">//读入图</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">if</span> (!st[i][j] &amp;&amp; g[i][j] == <span class="hljs-string">&#x27;W&#x27;</span>) &#123;<br>                ++cnt;<br>                <span class="hljs-built_in">bfs</span>(i, j);<br>            &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/1099/">acwing 1097</a></p>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索</tag>
      
      <tag>bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滑雪</title>
    <link href="/2022/05/28/%E6%BB%91%E9%9B%AA/"/>
    <url>/2022/05/28/%E6%BB%91%E9%9B%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h1><p>给定一个 R 行 C 列的矩阵，表示一个矩形网格滑雪场。</p><p>矩阵中第 i 行第 j 列的点表示滑雪场的第 i 行第 j 列区域的高度。</p><p>一个人从滑雪场中的某个区域内出发，每次可以向上下左右任意一个方向滑动一个单位距离。</p><p>当然，一个人能够滑动到某相邻区域的前提是该区域的高度低于自己目前所在区域的高度。</p><p>下面给出一个矩阵作为例子：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">1  2  3  4  5<br><br>16 17 18 19 6<br><br>15 24 25 20 7<br><br>14 23 22 21 8<br><br>13 12 11 10 9<br></code></pre></td></tr></table></figure><p>在给定矩阵中，一条可行的滑行轨迹为 24−17−2−1。</p><p>在给定矩阵中，最长的滑行轨迹为 25−24−23−…−3−2−1，沿途共经过 25 个区域。</p><p>现在给定你一个二维矩阵表示滑雪场各区域的高度，请你找出在该滑雪场中能够完成的最长滑雪轨迹，并输出其长度(可经过最大区域数)。</p><p>输入格式<br>第一行包含两个整数 R 和 C。</p><p>接下来 R 行，每行包含 C 个整数，表示完整的二维矩阵。</p><p>输出格式<br>输出一个整数，表示可完成的最长滑雪长度。</p><p>数据范围<br><code>1≤R,C≤300,</code><br><code>0≤矩阵中整数≤10000</code></p><p>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">5 5<br>1 2 3 4 5<br>16 17 18 19 6<br>15 24 25 20 7<br>14 23 22 21 8<br>13 12 11 10 9<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">25<br></code></pre></td></tr></table></figure><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> g[N][N];<span class="hljs-comment">//地图</span><br><span class="hljs-type">int</span> s[N][N];<span class="hljs-comment">//存每个格子所记忆下来可以走的最长距离</span><br><span class="hljs-type">int</span> dir[<span class="hljs-number">5</span>][<span class="hljs-number">2</span>] = &#123;&#123;&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-type">int</span> r, c;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s[x][y]) <span class="hljs-keyword">return</span> s[x][y];<span class="hljs-comment">//如果这个点有值，那便是搜过的点，直接return就好(故此题不需要状态数组记录是否走过)</span><br>    s[x][y] = <span class="hljs-number">1</span>;<span class="hljs-comment">//初始化距离为上一个点到自己，距离为1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-type">int</span> xx = x + dir[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> yy = y + dir[i][<span class="hljs-number">1</span>];<span class="hljs-comment">//加上方向向量</span><br>        <span class="hljs-keyword">if</span> (xx &gt;= <span class="hljs-number">1</span> &amp;&amp; xx &lt;= r &amp;&amp; yy &gt;= <span class="hljs-number">1</span> &amp;&amp; yy &lt;= c &amp;&amp; g[x][y] &gt; g[xx][yy]) &#123;<span class="hljs-comment">//满足进入下一个点的条件</span><br>            <span class="hljs-built_in">dfs</span>(xx, yy);<span class="hljs-comment">//继续搜</span><br>            s[x][y] = <span class="hljs-built_in">max</span>(s[x][y], s[xx][yy] + <span class="hljs-number">1</span>);<span class="hljs-comment">//状态方程，更新当前点能走到的最大值</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s[x][y];<span class="hljs-comment">//返回当前点所对应的距离</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;r, &amp;c);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= c; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i][j]);<span class="hljs-comment">//建图</span><br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= c; j++)<br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">dfs</span>(i, j));<span class="hljs-comment">//边搜边取最大值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<span class="hljs-comment">//输出</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记忆化搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长上升子序列</title>
    <link href="/2022/05/28/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2022/05/28/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><p>给定一个长度为 N 的数列，求数值严格单调递增的子序列的长度最长是多少。</p><p>输入格式<br>第一行包含整数 N。</p><p>第二行包含 N 个整数，表示完整序列。</p><p>输出格式<br>输出一个整数，表示最大长度。</p><p>数据范围<br><code>1≤N≤1000，</code><br><code>−109≤数列中的数≤109</code></p><p>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">7<br>3 1 2 1 8 5 6<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">4<br></code></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-type">int</span> n, ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<span class="hljs-comment">//存储第i个数的值</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        dp[i]=<span class="hljs-number">1</span>;<span class="hljs-comment">//memset()只能将数组初始化为-1或0，无法初始化为1，故在for里初始化</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i<span class="hljs-number">-1</span>; j++) <span class="hljs-comment">//每个第i个数都从头到自己前一个数扫一遍，找到最大的那个能接上的j（w[i]&gt;w[j]并且w[j]为此区间内最大满足条件的值），更新dp[i]为dp[j]+1</span><br>            <span class="hljs-keyword">if</span> (w[j] &lt; w[i]) dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[i]);<span class="hljs-comment">//扫描全区间，找最大值</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<span class="hljs-comment">//输出</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2022/05/28/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/05/28/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>给定你一个长度为 n 的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><p>输入格式</p><p>输入共两行，第一行包含整数 n。</p><p>第二行包含 n 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p><p>输出格式</p><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><p>数据范围</p><p>1≤n≤100000</p><p>输入样例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1 2 5 3 1 2 4 5<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">1<br>1 2 3 4 5 <br></code></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> s = l - <span class="hljs-number">1</span>, e = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> m = q[s + e &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (s &lt; e) &#123;<br>        <span class="hljs-keyword">do</span> s++; <span class="hljs-keyword">while</span> (q[s] &lt; m);<br>        <span class="hljs-keyword">do</span> e--; <span class="hljs-keyword">while</span> (q[e] &gt; m);<br>        <span class="hljs-keyword">if</span> (s &lt; e) <span class="hljs-built_in">swap</span>(q[s], q[e]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, e);<br>    <span class="hljs-built_in">quick_sort</span>(q, e + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-built_in">quick_sort</span>(a, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链式前向星</title>
    <link href="/2022/05/28/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/"/>
    <url>/2022/05/28/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 对于每个点 k，开一个单链表，存储 k所有可以走到的点。h[k]存储这个单链表的头结点</span><br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">// 添加一条边a-&gt;b</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 初始化</span><br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>图的存储</tag>
      
      <tag>板子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/28/hello-world/"/>
    <url>/2022/05/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h2 id="摸鱼大学生"><a href="#摸鱼大学生" class="headerlink" title="摸鱼大学生"></a>摸鱼大学生</h2><ul><li><input checked="" disabled="" type="checkbox"> 划水Acmer</li><li><input checked="" disabled="" type="checkbox"> 追番</li><li><input checked="" disabled="" type="checkbox"> Steam</li><li><input checked="" disabled="" type="checkbox"> 嘉心糖 </li><li><input disabled="" type="checkbox"> 日记</li></ul>]]></content>
    
  </entry>
  
  
  
</search>
