<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多重背包</title>
    <link href="/2022/07/09/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/"/>
    <url>/2022/07/09/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>控制每件物品的数量</p><p>解法1：暴力拆分为01背包</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span>;<br><span class="hljs-type">int</span> a[N], b[N], dp[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-type">int</span> v, w, s;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;v, &amp;w, &amp;s);<br>        <span class="hljs-keyword">while</span> (s--) &#123;<br>            a[++t] = v;<br>            b[t] = w;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= a[i]; j--)<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - a[i]] + b[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> dp[N], v[N], w[N], s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, volume;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;volume);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;v[i], &amp;w[i], &amp;s[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = volume; j &gt;= v[i]; j--)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= s[i]&amp;&amp;k*v[i]&lt;=j; k++)<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - v[i] * k] + k * w[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[volume]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解法2：二进制优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20010</span>;<br><span class="hljs-type">int</span> dp[N], a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, v, idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;v);<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        <span class="hljs-type">int</span> vi, wi, si, k = <span class="hljs-number">1</span>;<span class="hljs-comment">//vi-重量 wi-价值 si-单种物品数量 k-二进制左移位数</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;vi, &amp;wi, &amp;si);<br>        <span class="hljs-keyword">while</span> (si &gt;= k) &#123;<br>            a[++idx] = k * vi;<br>            b[idx] = k * wi;<br>            si -= k;<br>            k &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (si &gt; <span class="hljs-number">0</span>) &#123;<br>            a[++idx] = si * vi;<br>            b[idx] = si * wi;<br>        &#125;<br>    &#125;<br><br>    n = idx;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = v; j &gt;= a[i]; j--)<br>            <span class="hljs-comment">//dp过程中会自动搜寻到复合的二进制数量排列</span><br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - a[i]] + b[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[v]);<br>&#125;<br></code></pre></td></tr></table></figure><p>“为什么二进制组合能组合出任意数量”的画图解释</p><p><img src="https://img.charry233.xyz/20220709213642.png" /></p><p><del>解法3：单调队列优化(还没有学会)</del></p>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完全背包问题</title>
    <link href="/2022/07/09/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/09/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>与01背包的区别：</strong></p><p>01背包中每件物品只能拿一次，而完全背包中的物品可以拿无限次。</p><p><strong>代码上的区别</strong></p><p>前者的二层循环是逆序，而后者则是顺序</p><figure><img src="https://img.charry233.xyz/20220709210116.png" alt="顺序" /><figcaption aria-hidden="true">顺序</figcaption></figure><p><img src="https://img.charry233.xyz/20220709210158.png" /></p><p>朴素解法，暴力三重循环:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//朴素暴力版本，三重循环</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> v[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, weight;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;weight);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;v[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= weight; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k * w[j] &lt;= j; k++)<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - k * w[j]] + k * v[j]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[n][weight]);<br>&#125;<br></code></pre></td></tr></table></figure><p>优化解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10000</span>;<br><span class="hljs-type">int</span> v[N];    <span class="hljs-comment">// 体积</span><br><span class="hljs-type">int</span> w[N];    <span class="hljs-comment">// 价值</span><br><span class="hljs-type">int</span> f[N][N];  <span class="hljs-comment">// f[i][j], j体积下前i个物品的最大价值</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;  <span class="hljs-comment">// 背包体积</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;v[i], &amp;w[i]);<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++) &#123;<br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j];  <span class="hljs-comment">// 不选第i个物品</span><br>            <span class="hljs-keyword">if</span> (j &gt;= v[i])           <span class="hljs-comment">// 可以选择第i个物品，状态方程见上面推导</span><br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i][j - v[i]] + w[i]);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n][m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01背包</title>
    <link href="/2022/07/09/01%E8%83%8C%E5%8C%85/"/>
    <url>/2022/07/09/01%E8%83%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>每件物品只能使用一次</p><p><ahref="https://www.cnblogs.com/zyacmer/p/9961710.html">01背包的理解</a></p><p><img src="https://img.charry233.xyz/20220709204921.png" /></p><p>引用自b站的评论</p><p><img src="https://img.charry233.xyz/20220709204930.png" /></p><p>二维解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//二维解法</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> v[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, weight;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;weight);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;v[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = weight; j &gt;= <span class="hljs-number">1</span>; j--)<br>            <span class="hljs-keyword">if</span> (j &lt; w[i]) dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">else</span> dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - w[i]] + v[i]);<br><br>    cout &lt;&lt; dp[n][weight] &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//一维解法</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> v[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, weight;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;weight);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;v[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = weight; j &gt;= w[i]; j--)<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);<br><br>    cout &lt;&lt; dp[weight];<br>&#125;<br></code></pre></td></tr></table></figure><p>先遍历物品的解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//先遍历物品，再遍历容量</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> v[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, weight;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;weight);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;v[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= weight; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (i - w[j] &lt; <span class="hljs-number">0</span>) dp[j][i] = dp[j - <span class="hljs-number">1</span>][i];<br>            <span class="hljs-keyword">else</span> dp[j][i] = <span class="hljs-built_in">max</span>(dp[j - <span class="hljs-number">1</span>][i], dp[j - <span class="hljs-number">1</span>][i - w[j]] + v[j]);<br>    cout &lt;&lt; dp[n][weight];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构体/类排序</title>
    <link href="/2022/07/08/%E7%BB%93%E6%9E%84%E4%BD%93-%E7%B1%BB%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/07/08/%E7%BB%93%E6%9E%84%E4%BD%93-%E7%B1%BB%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="c-结构体排序">(c++) 结构体排序：</h3><p>利用重载运算符operator</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Range &amp;t)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;r&lt;ranget.r;<span class="hljs-comment">//按右端点r进行排序</span><br>    &#125;<br>&#125;range[N];<br><span class="hljs-built_in">sort</span>(range,range+n);<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span>&#123;<br>    <span class="hljs-type">int</span> x,y,z;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Range &amp;t)&#123;<br>        <span class="hljs-comment">//排序优先级分别为x,y,z</span><br>        <span class="hljs-keyword">if</span>(x！=t.x) <span class="hljs-keyword">return</span> x&lt;t.x<br>        <span class="hljs-keyword">if</span>(y!=t.y)<span class="hljs-keyword">return</span> y&lt;t.y;<br>        <span class="hljs-keyword">return</span> z&lt;t.z;<br>    &#125;<br>&#125;range[N];<br><span class="hljs-built_in">sort</span>(range,range+n);<br></code></pre></td></tr></table></figure><h3 id="java-类排序">(java) 类排序</h3><p>利用list类做容器存储类，再用其类库函数实现排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>   ArrayList&lt;pii&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   list.sort((o1,o2)-&gt;o1.l-o2.l);<span class="hljs-comment">//以左端点l升序排序</span><br>   list.sort((o1,o2)-&gt;o2.r-o1.r);<span class="hljs-comment">//以右端点r降序排序</span><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">pii</span> &#123;<br>  <span class="hljs-type">int</span> l, r;<br>  pii(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) &#123;<br>      <span class="hljs-built_in">this</span>.l = l;<br>      <span class="hljs-built_in">this</span>.r = r;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间选点</title>
    <link href="/2022/06/19/%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9/"/>
    <url>/2022/06/19/%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="区间选点">区间选点</h1><p>给定 <strong>N</strong> 个闭区间 [<spanclass="math inline">\(a_i,b_i\)</span>]，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。</p><p>输出选择的点的最小数量。</p><p>位于区间端点上的点也算作区间内。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 <strong>N</strong>，表示区间数。</p><p>接下来 <strong>N</strong> 行，每行包含两个整数 <strong><spanclass="math inline">\(a_i\)</span></strong>,<strong><spanclass="math inline">\(b_i\)</span></strong>,表示一个区间的两个端点。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示可选取区间的最大数量。</p><h4 id="数据范围">数据范围</h4><h4 id="输入样例">输入样例</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">3<br>-1 1<br>2 4<br>3 5<br></code></pre></td></tr></table></figure><h4 id="输出样例">输出样例</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">2<br></code></pre></td></tr></table></figure><h1 id="解法">解法：</h1><p><strong>目的:用尽可能少的点覆盖所有区间</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algorithm&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N =<span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Range &amp;w)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;r&lt;w.r;<br>    &#125;<br>&#125;;<br><br>Range range[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;range[i].l,&amp;range[i].r);<br>    <span class="hljs-built_in">sort</span>(range+<span class="hljs-number">1</span>,range+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>,end=<span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (end&lt;range[i].l)&#123;<br>            end=range[i].r;<br>            ++res;<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>区间问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>越狱</title>
    <link href="/2022/06/06/%E8%B6%8A%E7%8B%B1/"/>
    <url>/2022/06/06/%E8%B6%8A%E7%8B%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="越狱">越狱</h1><p>监狱有连续编号为 1 到 n 的 n 个房间，每个房间关押一个犯人。</p><p>有 m 种宗教，每个犯人可能信仰其中一种。</p><p>如果相邻房间的犯人信仰的宗教相同，就可能发生越狱。</p><p>求有多少种状态可能发生越狱。</p><h4 id="输入格式">输入格式</h4><p>共一行，包含两个整数 m 和 n。</p><h4 id="输出格式">输出格式</h4><p>可能越狱的状态数，对 100003 取余。</p><h4 id="数据范围">数据范围</h4><p><code>1≤m≤108</code> <code>1≤n≤1012</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">输入样例：<br>2 3<br>输出样例：<br>6<br></code></pre></td></tr></table></figure><h5 id="样例解释">样例解释</h5><h5 id="所有可能的-6-种状态为000001011100110111">所有可能的 6种状态为：(000)(001)(011)(100)(110)(111)。</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">100003</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quick_pow</span><span class="hljs-params">(ll base, ll pow)</span> </span>&#123;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (pow) &#123;<br>        <span class="hljs-keyword">if</span> (pow &amp; <span class="hljs-number">1</span>) res = (res * base) % mod;<br>        pow &gt;&gt;= <span class="hljs-number">1</span>;<br>        base = (base * base) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ll n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;m, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (<span class="hljs-built_in">quick_pow</span>(m, n) - m * <span class="hljs-built_in">quick_pow</span>(m - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>) % mod + mod) % mod);<br>    <span class="hljs-comment">//例如模数是 10，那么 11 - 8 取模以后就是 1 - 8 是负数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>快速幂</tag>
      
      <tag>组合计数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>质数距离</title>
    <link href="/2022/06/04/%E8%B4%A8%E6%95%B0%E8%B7%9D%E7%A6%BB/"/>
    <url>/2022/06/04/%E8%B4%A8%E6%95%B0%E8%B7%9D%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="质数距离">质数距离</h1><p>给定两个整数 L 和 U，你需要在闭区间 [<em>L,U</em>]内找到距离最接近的两个相邻质数 C1 和 C2（即 C2−C1是最小的），如果存在相同距离的其他相邻质数对，则输出第一对。</p><p>同时，你还需要找到距离最远的两个相邻质数 D1 和 D2（即 D1−D2是最大的），如果存在相同距离的其他相邻质数对，则输出第一对。</p><h4 id="输入格式">输入格式</h4><p>每行输入两个整数 L 和 U，其中 L 和 U 的差值不会超过 10^6。</p><h4 id="输出格式">输出格式</h4><p>对于每个 L 和 U，输出一个结果，结果占一行。</p><p>结果包括距离最近的相邻质数对和距离最远的相邻质数对。（具体格式参照样例）</p><p>如果 L 和 U 之间不存在质数对，则输出<code>There are no adjacent primes.</code>。</p><h4 id="数据范围">数据范围</h4><p>1≤ L&lt; U ≤ 2^31 -1</p><h4 id="输入样例">输入样例：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">2 17<br>14 17<br></code></pre></td></tr></table></figure><h4 id="输出样例">输出样例：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">2,3 are closest, 7,11 are most distant.<br>There are no adjacent primes.<br></code></pre></td></tr></table></figure><h2 id="解法">解法</h2><p>思路1：</p><p>​ 暴力筛出[1,<spanclass="math inline">\(2^{31}\)</span>]内的所有质数，然后开gap数组存每相邻两个数的距离，但是很显然这么做空间是不允许的</p><p>思路2：</p><p>​ 根据<ahref="https://charry233.xyz/2022/06/04/%E4%BB%BB%E6%84%8F%E5%90%88%E6%95%B0n%E5%AE%9A%E6%9C%89%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BA%8E%E6%A0%B9%E5%8F%B7n%E7%9A%84%E7%BA%A6%E6%95%B0/">定理1</a>可得，对于[0,<spanclass="math inline">\(2^{31}\)</span>]的范围，我们只需要筛[1,<spanclass="math inline">\(\sqrt{2^{31}}\)</span>]即最大筛到1e5内的质数即可，再用这1e5范围内的质数筛去完整的[1,<spanclass="math inline">\(2^{31}\)</span>]内所有合数即可，完成空间优化。</p><figure><img src="https://s3.bmp.ovh/imgs/2022/06/04/2266e81c70e6c319.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>​很关键的一点，pri数组存的时候，需要用到一个偏移量（离散化思想），在用到的时候再加回来，做到不爆内存空间(<del>在y总的视频中只是一笔带过，最开始弄得我百思不得其解</del>)。</p><p>​34行的<code>(p + l - 1) / p * p</code>是什么意思呢？这是j的起点公式，代表p在区间[l,u]内的第一个能整除p的数。</p><figure><img src="https://s3.bmp.ovh/imgs/2022/06/04/a7821e925a358735.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="ac代码">AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cstring&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> pri[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> cnt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ola</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(pri, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> pri);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<span class="hljs-comment">//因为题目需要循环读入，所以每一次都需要清空数组</span><br>    cnt = <span class="hljs-number">0</span>;<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) pri[++cnt] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; i * pri[j] &lt;= n; j++) &#123;<br>            st[i * pri[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % pri[j] == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> l, u;<br>     <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,&amp;l,&amp;u)==<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">ola</span>(<span class="hljs-number">50010</span>);<span class="hljs-comment">//欧拉筛，筛掉前一部分的质数</span><br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<span class="hljs-comment">//下面代码需要复用st数组，所以清空一次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++) &#123;<br>            ll p = pri[i];<br>            <span class="hljs-keyword">for</span> (ll j = <span class="hljs-built_in">max</span>(p &lt;&lt; <span class="hljs-number">1</span>, (p + l - <span class="hljs-number">1</span>) / p * p); j &lt;= u; j += p)<br>                st[j - l] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//l作为偏移量，后面会把它加回来</span><br>        &#125;<br>        cnt = <span class="hljs-number">0</span>;    <span class="hljs-comment">//因为最后要的质数范围为[l,u],所以重置下标，pri从更新过后的st开始判，只存[l,u]内的质数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= u - l; i++)<br>            <span class="hljs-keyword">if</span> (!st[i] &amp;&amp; i + l &gt;= <span class="hljs-number">2</span>)<br>                pri[++cnt] = i + l; <span class="hljs-comment">//加回偏移量</span><br>        <span class="hljs-keyword">if</span> (cnt &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">//[l,u]内的质数数量不到一对</span><br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;There are no adjacent primes.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//在pri数组中查找最远/近的质数对</span><br>            <span class="hljs-type">int</span> minp = <span class="hljs-number">1</span>, maxp = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt - <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-type">int</span> d = pri[i + <span class="hljs-number">1</span>] - pri[i];<br>                <span class="hljs-keyword">if</span> (d &lt; pri[minp + <span class="hljs-number">1</span>] - pri[minp]) minp = i;<br>                <span class="hljs-keyword">if</span> (d &gt; pri[maxp + <span class="hljs-number">1</span>] - pri[maxp]) maxp = i;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d are closest, %d,%d are most distant.\n&quot;</span>, pri[minp], pri[minp + <span class="hljs-number">1</span>], pri[maxp], pri[maxp + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任意合数n定有一个小于根号n的约数</title>
    <link href="/2022/06/04/%E4%BB%BB%E6%84%8F%E5%90%88%E6%95%B0n%E5%AE%9A%E6%9C%89%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BA%8E%E6%A0%B9%E5%8F%B7n%E7%9A%84%E7%BA%A6%E6%95%B0/"/>
    <url>/2022/06/04/%E4%BB%BB%E6%84%8F%E5%90%88%E6%95%B0n%E5%AE%9A%E6%9C%89%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BA%8E%E6%A0%B9%E5%8F%B7n%E7%9A%84%E7%BA%A6%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1id="任意合数n定有一个小于根号n的约数">任意合数n定有一个小于根号n的约数</h1><h2 id="证明过程">证明过程</h2><p>设此合数为<spanclass="math inline">\(x\)</span>，那么一个合数必定存在两个约数，我们设此约数分别为a,b<span class="math inline">\((a&lt;b)\)</span>。</p><p>即 <span class="math inline">\(a*b=x\)</span></p><p>已知 <span class="math inline">\(a&lt;b\)</span></p><p>则可得 <span class="math inline">\(a^2&lt;=x\)</span></p><p>化简：<span class="math inline">\(a&lt;=\sqrt(x)\)</span></p><blockquote><p>出处：<a href="https://www.acwing.com/problem/content/198/">AcWing196</a> y总的视频讲解</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>证明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定语从句</title>
    <link href="/2022/06/01/%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5/"/>
    <url>/2022/06/01/%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h1><h2 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h2><ul><li>主句</li><li>从句</li></ul><h2 id="先行词："><a href="#先行词：" class="headerlink" title="先行词："></a>先行词：</h2><p><strong>被从句修饰的名词或代词</strong></p><h2 id="关系词："><a href="#关系词：" class="headerlink" title="关系词："></a>关系词：</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>连接主句和从句</p><h3 id="Eg："><a href="#Eg：" class="headerlink" title="Eg："></a>Eg：</h3><h4 id="It-39-s-the-book-that-i-bought-last-year"><a href="#It-39-s-the-book-that-i-bought-last-year" class="headerlink" title="It&#39;s the book that i bought last year."></a><code>It&#39;s the book that i bought last year.</code></h4><p>主句: <code>It&#39;s the book.</code><br>从句：<code>I bought the book last year.</code><br>先行词：<code>book</code><br>关系词：<code>that</code></p><h3 id="对应关系："><a href="#对应关系：" class="headerlink" title="对应关系："></a>对应关系：</h3><table><thead><tr><th align="center">先行词</th><th align="center">人</th><th align="center">物</th></tr></thead><tbody><tr><td align="center">主语</td><td align="center">who &#x2F; that</td><td align="center">which &#x2F; that</td></tr><tr><td align="center">定语</td><td align="center">whose</td><td align="center">whose</td></tr><tr><td align="center">宾语</td><td align="center">who &#x2F; whom &#x2F; that &#x2F; 省略</td><td align="center">which &#x2F; that &#x2F; 省略</td></tr></tbody></table><h3 id="【关系代词只能用“that”的情况】："><a href="#【关系代词只能用“that”的情况】：" class="headerlink" title="【关系代词只能用“that”的情况】："></a>【关系代词只能用“<strong>that</strong>”的情况】：</h3><ol><li><p>先行词**是 <code>all</code>,<code>much</code>,<code>little</code>,<code>something</code>,<code>everything</code>,<code>anything</code>,<code>nothing</code>,<code>none</code>等 <em>不定代词</em> ** 时</p></li><li><p>先行词<strong>被<code>the only</code>,<code>any</code>,<code>few</code>,<code>no</code>,<code>very</code>等修饰</strong>时</p></li><li><p>先行词是<strong>形容词的最高级或序数词</strong>，或<strong>被形容词的最高级、序数词修饰</strong>时</p></li><li><p>先行词<strong>在主语中作表语，而关系代词也在从句中作表语</strong>时</p></li><li><p>先行词<strong>人、物并用</strong>时</p></li></ol><h3 id="【关系词只能用“which”的情况】："><a href="#【关系词只能用“which”的情况】：" class="headerlink" title="【关系词只能用“which”的情况】："></a>【关系词只能用“<strong>which</strong>”的情况】：</h3><p>当<strong>关系代词在句中作<code>介词</code>的<code>宾语</code>，且<code>介词</code>在<code>关系代词</code>之前</strong>时，此时<code>which</code>不可省略</p><p>Eg:</p><p>We have an active and pleasant working atmosphere <code>in which</code> we work efficiently every day.</p><h3 id="【引导词用“as”的情况】："><a href="#【引导词用“as”的情况】：" class="headerlink" title="【引导词用“as”的情况】："></a>【引导词用“<strong>as</strong>”的情况】：</h3><p>当先行词被<code>such</code>，<code>the same</code>修饰时：</p><p>Eg: <code>This is the same bike as I Bought last month.</code> (前调两者是同一类)</p><h2 id="限定性与非限定性定语从句："><a href="#限定性与非限定性定语从句：" class="headerlink" title="限定性与非限定性定语从句："></a>限定性与非限定性定语从句：</h2><table><thead><tr><th align="center">限定性定语从句</th><th align="center">非限定性定语从句</th></tr></thead><tbody><tr><td align="center">起限定作用，若省去则句意不完整</td><td align="center">起补充说明作用，若省去，句意不受影响</td></tr><tr><td align="center"><strong>紧跟先行词，无逗号隔开</strong></td><td align="center"><strong>以逗号分隔主句</strong></td></tr><tr><td align="center">修饰先行词</td><td align="center">修饰先行词 &#x2F; 修饰整个主句</td></tr><tr><td align="center">关系词可用<code>that</code>，有时可省略</td><td align="center"><strong>关系词不可用<code>that</code>，不可省略</strong></td></tr></tbody></table><h3 id="Eg"><a href="#Eg" class="headerlink" title="Eg:"></a>Eg:</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">The government which promises to cut taxes will be popular.<br>the government,which promises to cut taxes,will be popular.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>英语学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>定语从句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使役动词</title>
    <link href="/2022/06/01/%E4%BD%BF%E5%BD%B9%E5%8A%A8%E8%AF%8D/"/>
    <url>/2022/06/01/%E4%BD%BF%E5%BD%B9%E5%8A%A8%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="使役动词"><a href="#使役动词" class="headerlink" title="使役动词"></a>使役动词</h1><h2 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h2><h3 id="主动语态-：使役动词-受词-动词原形"><a href="#主动语态-：使役动词-受词-动词原形" class="headerlink" title="主动语态 ：使役动词 + 受词 + 动词原形"></a>主动语态 ：<code>使役动词</code> + <code>受词</code> + <code>动词原形</code></h3><h3 id="被动语态：使役动词-受词-pp"><a href="#被动语态：使役动词-受词-pp" class="headerlink" title="被动语态：使役动词 + 受词 + pp"></a>被动语态：<code>使役动词</code> + <code>受词</code> + <code>pp</code></h3><h2 id="have"><a href="#have" class="headerlink" title="have"></a>have</h2><p><em>交付某人任务，叫某人做事</em></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tex">Bobo had her dog do housework every day.<br>She had her dog laughing all through lunch.<br>Bobo has the car washed every week.<br>I had my hair cut yesterday.<br>（被动语态）<br>We have our office cleaned every weekend.<br>The accident got Kevin fired.<br></code></pre></td></tr></table></figure><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p><em>强迫某人做事</em></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">I made my sister clean her room.<br></code></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p><em>让某人做事</em></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">My teacher let me sing a song in front of the class.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>英语学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迷宫问题</title>
    <link href="/2022/05/28/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/28/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><p>给定一个 n×n 的二维数组，如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">int maze[5][5] = &#123;<br><br>0, 1, 0, 0, 0,<br><br>0, 1, 0, 1, 0,<br><br>0, 0, 0, 0, 0,<br><br>0, 1, 1, 1, 0,<br><br>0, 0, 0, 1, 0,<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。</p><p>数据保证至少存在一条从左上角走到右下角的路径。</p><p>输入格式<br>第一行包含整数 n。</p><p>接下来 n 行，每行包含 n 个整数 0 或 1，表示迷宫。</p><p>输出格式<br>输出从左上角到右下角的最短路线，如果答案不唯一，输出任意一条路径均可。</p><p>按顺序，每行输出一个路径中经过的单元格的坐标，左上角坐标为 (0,0)，右下角坐标为 (n−1,n−1)。</p><p>数据范围<br>0≤n≤1000<br>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">5<br>0 1 0 0 0<br>0 1 0 1 0<br>0 0 0 0 0<br>0 1 1 1 0<br>0 0 0 1 0<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">0 0<br>1 0<br>2 0<br>2 1<br>2 2<br>2 3<br>2 4<br>3 4<br>4 4<br></code></pre></td></tr></table></figure><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;queue&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br>PII memory[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    queue&lt;PII&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;n - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>&#125;);<br>    st[n - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        PII t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-type">int</span> x = t.first + dx[i];<br>            <span class="hljs-type">int</span> y = t.second + dy[i];<br>            <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; n &amp;&amp; !st[x][y] &amp;&amp; !g[x][y]) &#123;<br>                q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>                memory[x][y] = t;<br>                st[x][y] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i][j]);<br>    <span class="hljs-built_in">bfs</span>();<br>    PII t = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (t.first != n - <span class="hljs-number">1</span> || t.second != n - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, memory[t.first][t.second].first, memory[t.first][t.second].second);<br>        t = memory[t.first][t.second];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/1078/">acwing 1076</a></p>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索</tag>
      
      <tag>bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强连通分量</title>
    <link href="/2022/05/28/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <url>/2022/05/28/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>找树的头节点，进行作为整个trajan()的入口</li><li>找邻接点，进行深搜（递归前每个点都打上时间戳，并压入栈），直至第一个叶子节点</li><li>找到第一个强连通分量的入口，即dfn[x]&#x3D;&#x3D;low[x]，low[x]没有被更新过，没有可以依赖的父节点<br> 从栈顶（从栈顶开始是意味着压着x的点都为x点的后节点）开始弹出元素，直至x点被弹出，为一块强连通分量。（被弹出也就意味着他们不再具有被当作强连通父节点的资格了）</li><li>不断回溯，在递归回溯的过程中查找被回溯的点的low[x-1]是否比当前low[x]小，是则更新当前low[x]。</li></ul><h2 id="“如何发现强连通父节点？”"><a href="#“如何发现强连通父节点？”" class="headerlink" title="“如何发现强连通父节点？”"></a>“如何发现强连通父节点？”</h2><p>只要是一个强连通分量，就会存在 尾节点能扫到父节点 的情况，当发现这个父节点的dfn[i]!&#x3D;0，即他被遍历过了（顺序比自己靠前），那么走以下代码去判断是否可作为父节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (stack.contains(i)) <span class="hljs-comment">//是邻接点且还留在栈里，代表是候选连同量父节点</span><br>  low[x] = Math.min(low[x], dfn[i]);<br></code></pre></td></tr></table></figure><h2 id="栈的意义"><a href="#栈的意义" class="headerlink" title="栈的意义"></a>栈的意义</h2><ul><li>检验当前点是否可作为连通分量的父节点，即看它是否在栈内，因为已经被抛出的连通分量节点均已被弹出栈。</li></ul>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>强连通分量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>池塘计数</title>
    <link href="/2022/05/28/%E6%B1%A0%E5%A1%98%E8%AE%A1%E6%95%B0/"/>
    <url>/2022/05/28/%E6%B1%A0%E5%A1%98%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="池塘计数"><a href="#池塘计数" class="headerlink" title="池塘计数"></a>池塘计数</h1><p>农夫约翰有一片 N∗M 的矩形土地。<br>最近，由于降雨的原因，部分土地被水淹没了。<br>现在用一个字符矩阵来表示他的土地。<br>每个单元格内，如果包含雨水，则用”W”表示，如果不含雨水，则用”.”表示。<br>现在，约翰想知道他的土地中形成了多少片池塘。<br>每组相连的积水单元格集合可以看作是一片池塘。<br>每个单元格视为与其上、下、左、右、左上、右上、左下、右下八个邻近单元格相连。</p><p>请你输出共有多少片池塘，即矩阵中共有多少片相连的”W”块。</p><p>输入格式<br>第一行包含两个整数 N 和 M。</p><p>接下来 N 行，每行包含 M 个字符，字符为”W”或”.”，用以表示矩形土地的积水状况，字符之间没有空格。</p><p>输出格式<br>输出一个整数，表示池塘数目。</p><p>数据范围<br><code>1≤N,M≤1000</code></p><p>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">10 12<br>W........WW.<br>.WWW.....WWW<br>....WW...WW.<br>.........WW.<br>.........W..<br>..W......W..<br>.W.W.....WW.<br>W.W.W.....W.<br>.W.W......W.<br>..W.......W.<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3<br></code></pre></td></tr></table></figure><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by Charry on 2022/4/25.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br><span class="hljs-type">int</span> dir[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>,  <span class="hljs-number">0</span>&#125;,<br>                 &#123;<span class="hljs-number">0</span>,  <span class="hljs-number">1</span>&#125;,<br>                 &#123;<span class="hljs-number">1</span>,  <span class="hljs-number">1</span>&#125;,<br>                 &#123;<span class="hljs-number">1</span>,  <span class="hljs-number">0</span>&#125;,<br>                 &#123;<span class="hljs-number">1</span>,  <span class="hljs-number">-1</span>&#125;,<br>                 &#123;<span class="hljs-number">0</span>,  <span class="hljs-number">-1</span>&#125;,<br>                 &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;,<br>                 &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;,<br>                 &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;&#125;;<span class="hljs-comment">//八连通,八个方向</span><br><span class="hljs-type">int</span> n, m, cnt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; queue;<br>    queue.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>    st[x][y] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cur = queue.<span class="hljs-built_in">front</span>();<br>        queue.<span class="hljs-built_in">pop</span>();<br>        x = cur.first;<br>        y = cur.second;<br>        st[x][y] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-type">int</span> xx = x + dir[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> yy = y + dir[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (xx &gt;= <span class="hljs-number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= <span class="hljs-number">1</span> &amp;&amp; yy &lt;= m &amp;&amp; g[xx][yy] == <span class="hljs-string">&#x27;W&#x27;</span> &amp;&amp; !st[xx][yy]) &#123;<br>                queue.<span class="hljs-built_in">push</span>(&#123;xx, yy&#125;);<br>                st[xx][yy] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-type">char</span> t[m];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;t);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            g[i][j] = t[j - <span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-comment">//读入图</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">if</span> (!st[i][j] &amp;&amp; g[i][j] == <span class="hljs-string">&#x27;W&#x27;</span>) &#123;<br>                ++cnt;<br>                <span class="hljs-built_in">bfs</span>(i, j);<br>            &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/1099/">acwing 1097</a></p>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索</tag>
      
      <tag>bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滑雪</title>
    <link href="/2022/05/28/%E6%BB%91%E9%9B%AA/"/>
    <url>/2022/05/28/%E6%BB%91%E9%9B%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h1><p>给定一个 R 行 C 列的矩阵，表示一个矩形网格滑雪场。</p><p>矩阵中第 i 行第 j 列的点表示滑雪场的第 i 行第 j 列区域的高度。</p><p>一个人从滑雪场中的某个区域内出发，每次可以向上下左右任意一个方向滑动一个单位距离。</p><p>当然，一个人能够滑动到某相邻区域的前提是该区域的高度低于自己目前所在区域的高度。</p><p>下面给出一个矩阵作为例子：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">1  2  3  4  5<br><br>16 17 18 19 6<br><br>15 24 25 20 7<br><br>14 23 22 21 8<br><br>13 12 11 10 9<br></code></pre></td></tr></table></figure><p>在给定矩阵中，一条可行的滑行轨迹为 24−17−2−1。</p><p>在给定矩阵中，最长的滑行轨迹为 25−24−23−…−3−2−1，沿途共经过 25 个区域。</p><p>现在给定你一个二维矩阵表示滑雪场各区域的高度，请你找出在该滑雪场中能够完成的最长滑雪轨迹，并输出其长度(可经过最大区域数)。</p><p>输入格式<br>第一行包含两个整数 R 和 C。</p><p>接下来 R 行，每行包含 C 个整数，表示完整的二维矩阵。</p><p>输出格式<br>输出一个整数，表示可完成的最长滑雪长度。</p><p>数据范围<br><code>1≤R,C≤300,</code><br><code>0≤矩阵中整数≤10000</code></p><p>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">5 5<br>1 2 3 4 5<br>16 17 18 19 6<br>15 24 25 20 7<br>14 23 22 21 8<br>13 12 11 10 9<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">25<br></code></pre></td></tr></table></figure><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> g[N][N];<span class="hljs-comment">//地图</span><br><span class="hljs-type">int</span> s[N][N];<span class="hljs-comment">//存每个格子所记忆下来可以走的最长距离</span><br><span class="hljs-type">int</span> dir[<span class="hljs-number">5</span>][<span class="hljs-number">2</span>] = &#123;&#123;&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-type">int</span> r, c;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s[x][y]) <span class="hljs-keyword">return</span> s[x][y];<span class="hljs-comment">//如果这个点有值，那便是搜过的点，直接return就好(故此题不需要状态数组记录是否走过)</span><br>    s[x][y] = <span class="hljs-number">1</span>;<span class="hljs-comment">//初始化距离为上一个点到自己，距离为1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-type">int</span> xx = x + dir[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> yy = y + dir[i][<span class="hljs-number">1</span>];<span class="hljs-comment">//加上方向向量</span><br>        <span class="hljs-keyword">if</span> (xx &gt;= <span class="hljs-number">1</span> &amp;&amp; xx &lt;= r &amp;&amp; yy &gt;= <span class="hljs-number">1</span> &amp;&amp; yy &lt;= c &amp;&amp; g[x][y] &gt; g[xx][yy]) &#123;<span class="hljs-comment">//满足进入下一个点的条件</span><br>            <span class="hljs-built_in">dfs</span>(xx, yy);<span class="hljs-comment">//继续搜</span><br>            s[x][y] = <span class="hljs-built_in">max</span>(s[x][y], s[xx][yy] + <span class="hljs-number">1</span>);<span class="hljs-comment">//状态方程，更新当前点能走到的最大值</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s[x][y];<span class="hljs-comment">//返回当前点所对应的距离</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;r, &amp;c);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= c; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i][j]);<span class="hljs-comment">//建图</span><br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= c; j++)<br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">dfs</span>(i, j));<span class="hljs-comment">//边搜边取最大值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<span class="hljs-comment">//输出</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记忆化搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长上升子序列</title>
    <link href="/2022/05/28/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2022/05/28/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><p>给定一个长度为 N 的数列，求数值严格单调递增的子序列的长度最长是多少。</p><p>输入格式<br>第一行包含整数 N。</p><p>第二行包含 N 个整数，表示完整序列。</p><p>输出格式<br>输出一个整数，表示最大长度。</p><p>数据范围<br><code>1≤N≤1000，</code><br><code>−109≤数列中的数≤109</code></p><p>输入样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">7<br>3 1 2 1 8 5 6<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">4<br></code></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-type">int</span> n, ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<span class="hljs-comment">//存储第i个数的值</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        dp[i]=<span class="hljs-number">1</span>;<span class="hljs-comment">//memset()只能将数组初始化为-1或0，无法初始化为1，故在for里初始化</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i<span class="hljs-number">-1</span>; j++) <span class="hljs-comment">//每个第i个数都从头到自己前一个数扫一遍，找到最大的那个能接上的j（w[i]&gt;w[j]并且w[j]为此区间内最大满足条件的值），更新dp[i]为dp[j]+1</span><br>            <span class="hljs-keyword">if</span> (w[j] &lt; w[i]) dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[i]);<span class="hljs-comment">//扫描全区间，找最大值</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<span class="hljs-comment">//输出</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2022/05/28/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/05/28/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>给定你一个长度为 n 的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><p>输入格式</p><p>输入共两行，第一行包含整数 n。</p><p>第二行包含 n 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p><p>输出格式</p><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><p>数据范围</p><p>1≤n≤100000</p><p>输入样例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1 2 5 3 1 2 4 5<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">1<br>1 2 3 4 5 <br></code></pre></td></tr></table></figure><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> s = l - <span class="hljs-number">1</span>, e = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> m = q[s + e &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (s &lt; e) &#123;<br>        <span class="hljs-keyword">do</span> s++; <span class="hljs-keyword">while</span> (q[s] &lt; m);<br>        <span class="hljs-keyword">do</span> e--; <span class="hljs-keyword">while</span> (q[e] &gt; m);<br>        <span class="hljs-keyword">if</span> (s &lt; e) <span class="hljs-built_in">swap</span>(q[s], q[e]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, e);<br>    <span class="hljs-built_in">quick_sort</span>(q, e + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-built_in">quick_sort</span>(a, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链式前向星</title>
    <link href="/2022/05/28/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/"/>
    <url>/2022/05/28/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 对于每个点 k，开一个单链表，存储 k所有可以走到的点。h[k]存储这个单链表的头结点</span><br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">// 添加一条边a-&gt;b</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 初始化</span><br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>图的存储</tag>
      
      <tag>板子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/28/hello-world/"/>
    <url>/2022/05/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h3 id="咸鱼大学生">咸鱼大学生</h3><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />划水Acmer</li><li><input type="checkbox" disabled="" checked="" />Steam</li><li><input type="checkbox" disabled="" checked="" />追番</li><li><input type="checkbox" disabled="" checked="" />日记</li><li><input type="checkbox" disabled="" checked="" />嘉心糖</li></ul>]]></content>
    
  </entry>
  
  
  
</search>
